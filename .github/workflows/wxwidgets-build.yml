name: Build wxWidgets Libraries

on:
  workflow_dispatch:
    inputs:
      wx_version:
        description: 'wxWidgets version to build'
        required: true
        default: '3.3.1'
        type: string
      force_rebuild:
        description: 'Force rebuild even if release exists'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wxwidgets:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build_type: Release
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y libgtk-3-dev libpng-dev libjpeg-dev libgl1-mesa-dev libglu1-mesa-dev libxkbcommon-dev libexpat1-dev libtiff-dev build-essential cmake
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build_type: Debug
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y libgtk-3-dev libpng-dev libjpeg-dev libgl1-mesa-dev libglu1-mesa-dev libxkbcommon-dev libexpat1-dev libtiff-dev build-essential cmake
          - os: macos-13
            target: x86_64-apple-darwin
            build_type: Release
            setup_script: |
              brew install cmake
          - os: macos-13
            target: x86_64-apple-darwin
            build_type: Debug
            setup_script: |
              brew install cmake
          - os: macos-latest
            target: aarch64-apple-darwin
            build_type: Release
            setup_script: |
              brew install cmake
          - os: macos-latest
            target: aarch64-apple-darwin
            build_type: Debug
            setup_script: |
              brew install cmake
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build_type: Release
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build_type: Debug
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: i686-pc-windows-msvc
            build_type: Release
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: i686-pc-windows-msvc
            build_type: Debug
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: i686-win7-windows-msvc
            build_type: Release
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: i686-win7-windows-msvc
            build_type: Debug
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: x86_64-win7-windows-msvc
            build_type: Release
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: x86_64-win7-windows-msvc
            build_type: Debug
            setup_script: |
              choco install ninja
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            build_type: Release
            setup_script: ""
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            build_type: Debug
            setup_script: ""
    
    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup MinGW64 (Windows GNU only)
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          # Install CMake first
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          
          # Download WinLibs GCC 15.1.0 to match the user's local environment
          echo "Downloading WinLibs GCC 15.1.0 (POSIX threads, UCRT)..."
          curl -L -o winlibs-x86_64.zip "https://github.com/brechtsanders/winlibs_mingw/releases/download/15.1.0posix-13.0.0-ucrt-r2/winlibs-x86_64-posix-seh-gcc-15.1.0-mingw-w64ucrt-13.0.0-r2.zip"
          
          echo "Extracting MinGW..."
          7z x winlibs-x86_64.zip -o"C:\mingw64" -y
          
          # Find the actual mingw64 directory (may be nested)
          MINGW_DIR=$(find /c/mingw64 -name "mingw64" -type d | head -1)
          if [ -z "$MINGW_DIR" ]; then
            # If not found, use the first directory that contains bin/gcc.exe
            MINGW_DIR=$(find /c/mingw64 -name "gcc.exe" -type f | head -1 | xargs dirname | xargs dirname)
          fi
          
          echo "Found MinGW at: $MINGW_DIR"
          
          # Add to PATH
          echo "$MINGW_DIR/bin" >> $GITHUB_PATH
          
          # Set environment variables for CMake
          echo "CMAKE_C_COMPILER=$MINGW_DIR/bin/gcc.exe" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER=$MINGW_DIR/bin/g++.exe" >> $GITHUB_ENV
          echo "CMAKE_MAKE_PROGRAM=$MINGW_DIR/bin/mingw32-make.exe" >> $GITHUB_ENV
          
          # Verify installation
          "$MINGW_DIR/bin/gcc.exe" --version

      - name: Setup MSVC (Windows MSVC only)
        if: endsWith(matrix.target, '-windows-msvc')
        uses: microsoft/setup-msbuild@v2
        
      - name: Configure MSVC Environment (Windows MSVC only)
        if: endsWith(matrix.target, '-windows-msvc')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ (matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-win7-windows-msvc') && 'x64' || 'x86' }}

      - name: Install platform dependencies (Non-Windows)
        if: matrix.setup_script != '' && matrix.target != 'x86_64-pc-windows-gnu'
        run: ${{ matrix.setup_script }}
        
      - name: Install platform dependencies (Windows GNU)
        if: matrix.setup_script != '' && matrix.target == 'x86_64-pc-windows-gnu'
        run: ${{ matrix.setup_script }}

      - name: Check if release already exists
        if: ${{ !inputs.force_rebuild }}
        id: check_release
        run: |
          RELEASE_TAG="wxwidgets-${{ inputs.wx_version }}"
          echo "Checking for existing release: $RELEASE_TAG"
          
          # Check if release exists and has our artifact
          RELEASE_EXISTS=$(gh release view "$RELEASE_TAG" --json assets --jq '.assets[] | select(.name=="${{ matrix.target }}-${{ matrix.build_type }}.tar.gz") | .name' 2>/dev/null || echo "")
          
          if [ -n "$RELEASE_EXISTS" ]; then
            echo "Release $RELEASE_TAG already has ${{ matrix.target }}-${{ matrix.build_type }}.tar.gz"
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "Need to build ${{ matrix.target }}-${{ matrix.build_type }}.tar.gz for release $RELEASE_TAG"
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Download wxWidgets source (Non-Windows)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target != 'x86_64-pc-windows-gnu'
        run: |
          WX_VERSION="${{ inputs.wx_version }}"
          WX_TARBALL="wxWidgets-${WX_VERSION}.tar.bz2"
          WX_URL="https://github.com/wxWidgets/wxWidgets/releases/download/v${WX_VERSION}/${WX_TARBALL}"
          
          echo "Downloading wxWidgets ${WX_VERSION} from ${WX_URL}"
          curl -L -o "${WX_TARBALL}" "${WX_URL}"
          
          echo "Extracting ${WX_TARBALL}"
          tar -xjf "${WX_TARBALL}"
          
          echo "WX_SOURCE_DIR=wxWidgets-${WX_VERSION}" >> $GITHUB_ENV
          
      - name: Download wxWidgets source (Windows GNU)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          WX_VERSION="${{ inputs.wx_version }}"
          WX_TARBALL="wxWidgets-${WX_VERSION}.tar.bz2"
          WX_URL="https://github.com/wxWidgets/wxWidgets/releases/download/v${WX_VERSION}/${WX_TARBALL}"
          
          echo "Downloading wxWidgets ${WX_VERSION} from ${WX_URL}"
          curl -L -o "${WX_TARBALL}" "${WX_URL}"
          
          echo "Extracting ${WX_TARBALL}"
          tar -xjf "${WX_TARBALL}"
          
          echo "WX_SOURCE_DIR=wxWidgets-${WX_VERSION}" >> $GITHUB_ENV

      - name: Configure wxWidgets build (Non-Windows GNU)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target != 'x86_64-pc-windows-gnu'
        run: |
          mkdir -p build
          cd build
          
          # Configure wxWidgets with all features enabled for static linking
          CMAKE_ARGS=(
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DwxBUILD_SHARED=OFF
            -DwxBUILD_SAMPLES=OFF
            -DwxBUILD_TESTS=OFF
            -DwxBUILD_DEMOS=OFF
            -DwxBUILD_BENCHMARKS=OFF
            -DwxBUILD_LOCALES=OFF
            -DwxUSE_EXCEPTIONS=OFF
            -DwxUSE_GUI=ON
            -DwxUSE_OPENGL=ON
            -DwxUSE_HTML=OFF
            -DwxUSE_WEBVIEW=OFF
            -DwxUSE_MEDIACTRL=OFF
            -DwxUSE_STC=OFF
            -DwxUSE_XRC=ON
            -DwxUSE_XML=ON
            -DwxUSE_AUI=OFF
            -DwxUSE_PROPGRID=ON
            -DwxUSE_LIBWEBP=OFF
            -DwxUSE_LIBJPEG=OFF
            -DwxUSE_LIBTIFF=OFF
            -DwxUSE_NANOSVG=OFF
            -DwxUSE_RICHTEXT=OFF
            -DwxUSE_REGEX=OFF
            -DwxUSE_WXHTML_HELP=OFF
          )
          
          # Platform-specific configuration
          case "${{ matrix.target }}" in
            "x86_64-apple-darwin")
              CMAKE_ARGS+=(
                -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13
                -DCMAKE_OSX_ARCHITECTURES=x86_64
                -DwxBUILD_TOOLKIT=osx_cocoa
              )
              ;;
            "aarch64-apple-darwin")
              CMAKE_ARGS+=(
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0
                -DCMAKE_OSX_ARCHITECTURES=arm64
                -DwxBUILD_TOOLKIT=osx_cocoa
              )
              ;;
            "x86_64-pc-windows-msvc")
              CMAKE_ARGS+=(
                -G "Visual Studio 17 2022"
                -A x64
                -DwxBUILD_TOOLKIT=msw
                -DHAVE_INTPTR_T=1
                -DWXINTPTR_DEFINED=1
                -D_WINDOWS=1
                -DWIN32=1
                -D_WIN32=1
                -D__WXMSW__=1
              )
              ;;
            "i686-pc-windows-msvc")
              CMAKE_ARGS+=(
                -G "Visual Studio 17 2022"
                -A Win32
                -DwxBUILD_TOOLKIT=msw
                -DHAVE_INTPTR_T=1
                -DWXINTPTR_DEFINED=1
                -D_WINDOWS=1
                -DWIN32=1
                -D_WIN32=1
                -D__WXMSW__=1
              )
              ;;
            "i686-win7-windows-msvc")
              CMAKE_ARGS+=(
                -G "Visual Studio 17 2022"
                -A Win32
                -DwxBUILD_TOOLKIT=msw
                -DHAVE_INTPTR_T=1
                -DWXINTPTR_DEFINED=1
                -D_WINDOWS=1
                -DWIN32=1
                -D_WIN32=1
                -D__WXMSW__=1
              )
              ;;
            "x86_64-win7-windows-msvc")
              CMAKE_ARGS+=(
                -G "Visual Studio 17 2022"
                -A x64
                -DwxBUILD_TOOLKIT=msw
                -DHAVE_INTPTR_T=1
                -DWXINTPTR_DEFINED=1
                -D_WINDOWS=1
                -DWIN32=1
                -D_WIN32=1
                -D__WXMSW__=1
              )
              ;;
            "x86_64-unknown-linux-gnu")
              CMAKE_ARGS+=(
                -DwxBUILD_TOOLKIT=gtk3
              )
              ;;
          esac
          
          echo "Configuring with: cmake ${CMAKE_ARGS[@]} ../${WX_SOURCE_DIR}"
          cmake "${CMAKE_ARGS[@]}" "../${WX_SOURCE_DIR}"
          
      - name: Configure wxWidgets build (Windows GNU)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          # Verify tools are available
          echo "Checking build tools..."
          which gcc g++ make cmake ar
          gcc --version
          make --version
          cmake --version
          
          mkdir -p build
          cd build
          
          # Configure wxWidgets with all features enabled for static linking
          CMAKE_ARGS=(
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_C_COMPILER="${CMAKE_C_COMPILER}"
            -DCMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER}"
            -DCMAKE_MAKE_PROGRAM="${CMAKE_MAKE_PROGRAM}"
            -DwxBUILD_SHARED=OFF
            -DwxBUILD_SAMPLES=OFF
            -DwxBUILD_TESTS=OFF
            -DwxBUILD_DEMOS=OFF
            -DwxBUILD_BENCHMARKS=OFF
            -DwxBUILD_LOCALES=OFF
            -DwxUSE_EXCEPTIONS=OFF
            -DwxUSE_GUI=ON
            -DwxUSE_OPENGL=ON
            -DwxUSE_HTML=OFF
            -DwxUSE_WEBVIEW=OFF
            -DwxUSE_MEDIACTRL=OFF
            -DwxUSE_STC=OFF
            -DwxUSE_XRC=ON
            -DwxUSE_XML=ON
            -DwxUSE_AUI=OFF
            -DwxUSE_PROPGRID=ON
            -DwxUSE_LIBWEBP=OFF
            -DwxUSE_LIBJPEG=OFF
            -DwxUSE_LIBTIFF=OFF
            -DwxUSE_NANOSVG=OFF
            -DwxUSE_RICHTEXT=OFF
            -DwxUSE_REGEX=OFF
            -DwxUSE_WXHTML_HELP=OFF
          )
          
          CMAKE_ARGS+=(
            -G "MinGW Makefiles"
            -DwxBUILD_TOOLKIT=msw
          )
          
          echo "Configuring with: cmake ${CMAKE_ARGS[@]} ../${WX_SOURCE_DIR}"
          cmake "${CMAKE_ARGS[@]}" "../${WX_SOURCE_DIR}"

      - name: Build wxWidgets (Non-Windows GNU)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target != 'x86_64-pc-windows-gnu'
        run: |
          cd build
          
          # Build with all available CPU cores
          NPROC=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
          echo "Building with ${NPROC} parallel jobs"
          
          # For Windows MSVC, we need to specify the config explicitly
          if [[ "${{ matrix.target }}" == *"-windows-msvc" ]]; then
            echo "Building Windows MSVC with config: ${{ matrix.build_type }}"
            cmake --build . --config ${{ matrix.build_type }} --parallel ${NPROC}
          else
            cmake --build . --parallel ${NPROC}
          fi
          
      - name: Build wxWidgets (Windows GNU)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          cd build
          
          # Build with reduced parallelism to avoid memory issues
          NPROC=2
          echo "Building with ${NPROC} parallel jobs"
          
          cmake --build . --parallel ${NPROC}

      - name: Package libraries (Non-Windows GNU)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target != 'x86_64-pc-windows-gnu'
        run: |
          # Create packaging directory
          mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}"
          
          # Platform-specific library packaging
          case "${{ matrix.target }}" in
            "x86_64-pc-windows-msvc")
              # Windows MSVC x64: organize libraries in vc_x64_lib subdirectory only
              if [ -d "build/lib/vc_x64_lib" ]; then
                mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib"
                # Copy only .lib files (no .pdb files for release builds)
                if [ "${{ matrix.build_type }}" = "Release" ]; then
                  find build/lib/vc_x64_lib -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib/" \;
                  echo "Copied .lib files only (excluding .pdb files for release build)"
                else
                  cp -r build/lib/vc_x64_lib/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib/"
                  echo "Copied all files including .pdb files for debug build"
                fi
              fi
              # Copy additional files from root lib directory (excluding duplicates)
              if [ -d "build/lib" ]; then
                find build/lib -maxdepth 1 -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.exe" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.dll" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.cmake" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
              fi
              ;;
            "i686-pc-windows-msvc")
              # Windows MSVC x86: organize libraries in vc_lib subdirectory (32-bit uses different naming)
              if [ -d "build/lib/vc_lib" ]; then
                mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib"
                # Copy only .lib files (no .pdb files for release builds)
                if [ "${{ matrix.build_type }}" = "Release" ]; then
                  find build/lib/vc_lib -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib/" \;
                  echo "Copied .lib files only (excluding .pdb files for release build)"
                else
                  cp -r build/lib/vc_lib/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib/"
                  echo "Copied all files including .pdb files for debug build"
                fi
              fi
              # Copy additional files from root lib directory (excluding duplicates)
              if [ -d "build/lib" ]; then
                find build/lib -maxdepth 1 -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.exe" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.dll" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.cmake" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
              fi
              ;;
            "i686-win7-windows-msvc")
              # Windows 7 compatible MSVC i686: organize libraries in vc_lib subdirectory (32-bit uses different naming)
              if [ -d "build/lib/vc_lib" ]; then
                mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib"
                # Copy only .lib files (no .pdb files for release builds)
                if [ "${{ matrix.build_type }}" = "Release" ]; then
                  find build/lib/vc_lib -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib/" \;
                  echo "Copied .lib files only (excluding .pdb files for release build)"
                else
                  cp -r build/lib/vc_lib/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib/"
                  echo "Copied all files including .pdb files for debug build"
                fi
              fi
              # Copy additional files from root lib directory (excluding duplicates)
              if [ -d "build/lib" ]; then
                find build/lib -maxdepth 1 -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_lib/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.exe" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.dll" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.cmake" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
              fi
              ;;
            "x86_64-win7-windows-msvc")
              # Windows 7 compatible MSVC x64: organize libraries in vc_x64_lib subdirectory (64-bit uses different naming)
              if [ -d "build/lib/vc_x64_lib" ]; then
                mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib"
                # Copy only .lib files (no .pdb files for release builds)
                if [ "${{ matrix.build_type }}" = "Release" ]; then
                  find build/lib/vc_x64_lib -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib/" \;
                  echo "Copied .lib files only (excluding .pdb files for release build)"
                else
                  cp -r build/lib/vc_x64_lib/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib/"
                  echo "Copied all files including .pdb files for debug build"
                fi
              fi
              # Copy additional files from root lib directory (excluding duplicates)
              if [ -d "build/lib" ]; then
                find build/lib -maxdepth 1 -name "*.lib" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/vc_x64_lib/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.exe" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.dll" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
                find build/lib -maxdepth 1 -name "*.cmake" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
              fi
              ;;
            *)
              # Non-Windows platforms: copy everything from build/lib
              if [ -d "build/lib" ]; then
                cp -r build/lib/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/"
              fi
              ;;
          esac
          
          # Copy wxWidgets headers (source headers + generated headers)
          echo "Packaging wxWidgets headers..."
          if [ -d "${WX_SOURCE_DIR}/include" ]; then
            mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/include"
            cp -r "${WX_SOURCE_DIR}/include/"* "dist/${{ matrix.target }}-${{ matrix.build_type }}/include/"
          fi
          
          # Copy generated headers from build directory
          if [ -d "build/lib/wx" ]; then
            mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/wx"
            cp -r build/lib/wx/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/wx/"
          fi
          
          # Special handling for Windows MSVC setup.h
          if [[ "${{ matrix.target }}" == *"-windows-msvc" ]]; then
            echo "Creating MSVC-specific setup.h patch..."
            # Find the setup.h file
            SETUP_H_PATH=$(find "dist/${{ matrix.target }}-${{ matrix.build_type }}" -name "setup.h" | head -1)
            if [ -n "$SETUP_H_PATH" ]; then
              echo "Found setup.h at: $SETUP_H_PATH"
              # Create our MSVC fixes as a separate file
              echo "/* MSVC compatibility fixes - Added by wxDragon build */" > temp_setup_prefix.h
              echo "#ifdef _MSC_VER" >> temp_setup_prefix.h
              echo "    #include <stdint.h>" >> temp_setup_prefix.h
              echo "    #include <stddef.h>" >> temp_setup_prefix.h
              echo "    #ifndef wxIntPtr" >> temp_setup_prefix.h
              echo "        #ifdef _WIN64" >> temp_setup_prefix.h
              echo "            typedef intptr_t wxIntPtr;" >> temp_setup_prefix.h
              echo "            typedef uintptr_t wxUIntPtr;" >> temp_setup_prefix.h
              echo "        #else" >> temp_setup_prefix.h
              echo "            typedef int wxIntPtr;" >> temp_setup_prefix.h
              echo "            typedef unsigned int wxUIntPtr;" >> temp_setup_prefix.h
              echo "        #endif" >> temp_setup_prefix.h
              echo "        #define WXINTPTR_DEFINED 1" >> temp_setup_prefix.h
              echo "        #define WXUINTPTR_DEFINED 1" >> temp_setup_prefix.h
              echo "    #endif" >> temp_setup_prefix.h
              echo "#endif" >> temp_setup_prefix.h
              echo "" >> temp_setup_prefix.h
              # Combine our fixes with the original setup.h
              cat temp_setup_prefix.h "$SETUP_H_PATH" > temp_setup.h
              mv temp_setup.h "$SETUP_H_PATH"
              rm temp_setup_prefix.h
              echo "Applied MSVC fixes to setup.h"
            else
              echo "Warning: setup.h not found in package"
            fi
          fi
          
          # Create version info file
          echo "wxWidgets Version: ${{ inputs.wx_version }}" > "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          echo "Build Target: ${{ matrix.target }}" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          echo "Build Date: $(date -u)" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          echo "Build OS: ${{ matrix.os }}" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          if [[ "${{ matrix.target }}" == "i686-win7-windows-msvc" ]]; then
            echo "Windows 7 Compatible: Yes (official Rust target)" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
            echo "Architecture: i686 (32-bit)" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          elif [[ "${{ matrix.target }}" == "x86_64-win7-windows-msvc" ]]; then
            echo "Windows 7 Compatible: Yes (official Rust target)" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
            echo "Architecture: x86_64 (64-bit)" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          fi
          
          # List contents for debugging
          echo "Packaged libraries:"
          find "dist/${{ matrix.target }}-${{ matrix.build_type }}" -name "*.a" -o -name "*.lib" 2>/dev/null | head -20 || true
          echo "Packaged headers:"
          find "dist/${{ matrix.target }}-${{ matrix.build_type }}" -name "*.h" 2>/dev/null | head -10 || true
          
          # Create tarball
          cd dist
          ARTIFACT_NAME="wxwidgets-${{ inputs.wx_version }}-${{ matrix.target }}-$(echo "${{ matrix.build_type }}" | tr '[:upper:]' '[:lower:]')"
          mv "${{ matrix.target }}-${{ matrix.build_type }}" "${ARTIFACT_NAME}"
          tar -czf "${ARTIFACT_NAME}.tar.gz" "${ARTIFACT_NAME}"
          
          # Verify tarball
          echo "Created tarball: $(ls -lh ${ARTIFACT_NAME}.tar.gz)"
          cd ..
          
      - name: Package libraries (Windows GNU)
        if: steps.check_release.outputs.skip_build != 'true' && matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          # Create packaging directory
          mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}"
          
          # Windows GNU: organize libraries in gcc_x64_lib subdirectory only (no duplicates)
          if [ -d "build/lib/gcc_x64_lib" ]; then
            mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/gcc_x64_lib"
            cp -r build/lib/gcc_x64_lib/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/gcc_x64_lib/"
            echo "Copied libraries to gcc_x64_lib subdirectory"
          fi
          
          # Copy additional files from root lib directory (excluding library duplicates)
          if [ -d "build/lib" ]; then
            find build/lib -maxdepth 1 -name "*.exe" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
            find build/lib -maxdepth 1 -name "*.dll" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
            find build/lib -maxdepth 1 -name "*.cmake" -exec cp {} "dist/${{ matrix.target }}-${{ matrix.build_type }}/" \; 2>/dev/null || true
            echo "Copied additional files (exe, dll, cmake) to root directory"
          fi
          
          # Copy wxWidgets headers (source headers + generated headers)
          echo "Packaging wxWidgets headers..."
          if [ -d "${WX_SOURCE_DIR}/include" ]; then
            mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/include"
            cp -r "${WX_SOURCE_DIR}/include/"* "dist/${{ matrix.target }}-${{ matrix.build_type }}/include/"
          fi
          
          # Copy generated headers from build directory
          if [ -d "build/lib/wx" ]; then
            mkdir -p "dist/${{ matrix.target }}-${{ matrix.build_type }}/wx"
            cp -r build/lib/wx/* "dist/${{ matrix.target }}-${{ matrix.build_type }}/wx/"
          fi
          
          # Create version info file with compiler info
          echo "wxWidgets Version: ${{ inputs.wx_version }}" > "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          echo "Build Target: ${{ matrix.target }}" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          echo "Build Date: $(date -u)" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          echo "Build OS: ${{ matrix.os }}" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          echo "Compiler: WinLibs GCC 15.1.0 (POSIX threads, UCRT)" >> "dist/${{ matrix.target }}-${{ matrix.build_type }}/VERSION.txt"
          
          # List contents for debugging
          echo "Packaged libraries:"
          find "dist/${{ matrix.target }}-${{ matrix.build_type }}" -name "*.a" -o -name "*.lib" 2>/dev/null | head -20 || true
          echo "Packaged headers:"
          find "dist/${{ matrix.target }}-${{ matrix.build_type }}" -name "*.h" 2>/dev/null | head -10 || true
          
          # Create tarball
          cd dist
          ARTIFACT_NAME="wxwidgets-${{ inputs.wx_version }}-${{ matrix.target }}-$(echo "${{ matrix.build_type }}" | tr '[:upper:]' '[:lower:]')"
          mv "${{ matrix.target }}-${{ matrix.build_type }}" "${ARTIFACT_NAME}"
          tar -czf "${ARTIFACT_NAME}.tar.gz" "${ARTIFACT_NAME}"
          
          # Verify tarball
          echo "Created tarball: $(ls -lh ${ARTIFACT_NAME}.tar.gz)"
          cd ..

      - name: Upload artifact for review
        if: steps.check_release.outputs.skip_build != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: wxwidgets-${{ inputs.wx_version }}-${{ matrix.target }}-${{ matrix.build_type }}
          path: dist/wxwidgets-${{ inputs.wx_version }}-${{ matrix.target }}-*.tar.gz
          retention-days: 7

  create-release:
    needs: build-wxwidgets
    runs-on: ubuntu-latest
    if: always() && (needs.build-wxwidgets.result == 'success' || needs.build-wxwidgets.result == 'skipped')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create or update release
        run: |
          RELEASE_TAG="wxwidgets-${{ inputs.wx_version }}"
          
          # Check if release exists
          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Release $RELEASE_TAG already exists, updating with new artifacts"
          else
            echo "Creating new release $RELEASE_TAG"
            
            # Create release notes
            cat > release_notes.md << 'EOF'
          Pre-built static libraries for wxWidgets ${{ inputs.wx_version }} across all supported platforms.

          ## What's Included
          Pure wxWidgets static libraries only. No additional wrapper libraries.

          ## Included Platforms
          - Linux x64 (GTK3)
          - macOS x64 (Cocoa, Intel)
          - macOS ARM64 (Cocoa, Apple Silicon)
          - Windows x64 (MSVC)
          - Windows x86 (MSVC)
          - Windows x64 (MinGW64)
          - Windows i686 (MSVC, Windows 7 Compatible)

          ## Features Enabled
          All libraries include support for:
          - AUI (Advanced User Interface)
          - Media Control
          - WebView
          - Styled Text Control (STC)
          - XML Resources (XRC)
          - OpenGL
          - Property Grid

          ## Usage
          These libraries are automatically downloaded by wxDragon's build script. Manual usage is not typically needed.
          EOF
            
            gh release create "$RELEASE_TAG" \
              --title "wxWidgets ${{ inputs.wx_version }} Pre-built Libraries" \
              --notes-file release_notes.md
          fi
          
          # Upload all new artifacts
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              for tarball in "$artifact_dir"*.tar.gz; do
                if [ -f "$tarball" ]; then
                  echo "Uploading $(basename "$tarball")"
                  gh release upload "$RELEASE_TAG" "$tarball" --clobber
                fi
              done
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
